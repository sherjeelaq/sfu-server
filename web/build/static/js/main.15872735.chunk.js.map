{"version":3,"sources":["env.js","Host.js","Guest.js","App.js","index.js"],"names":["iceServers","urls","config","env","ip","Host","a","navigator","mediaDevices","getUserMedia","video","audio","stream","document","getElementById","srcObject","peer","createPeer","getTracks","forEach","track","addTrack","RTCPeerConnection","onnegotiationneeded","handleNegotiationNeededEvent","createOffer","offer","setLocalDescription","payload","sdp","localDescription","axios","post","data","desc","RTCSessionDescription","setRemoteDescription","catch","e","console","log","autoPlay","id","onClick","init","Guest","addTransceiver","direction","ontrack","handleTrackEvent","offerToReceiveAudio","offerToReceiveVideo","remoteVideo","streams","style","height","width","borderRadius","src","type","App","path","component","from","to","ReactDOM","render","StrictMode"],"mappings":"+LAiCe,EAZA,CACbA,WAAY,CACV,CACEC,KAAM,gCASG,EAJJ,kC,OCzBHC,EAAeC,EAAPC,EAAOD,EAkDRE,MAhDf,WAAgB,4CACd,8BAAAC,EAAA,sEAEuBC,UAAUC,aAAaC,aAAa,CACvDC,OAAO,EACPC,OAAO,IAJX,OAEQC,EAFR,OAQEC,SAASC,eAAe,SAASC,UAAYH,EAEvCI,EAAOC,IACbL,EAAOM,YAAYC,SAAQ,SAAAC,GAAK,OAAIJ,EAAKK,SAASD,EAAOR,MAX3D,4CADc,sBAed,SAASK,IACP,IAAMD,EAAO,IAAIM,kBAAkBpB,GAInC,OAHAc,EAAKO,oBAAsB,kBAjBf,2CAkBVC,CAA6BR,IAExBA,EApBK,4CAuBd,WAA4CA,GAA5C,uBAAAV,EAAA,sEAGsBU,EAAKS,cAH3B,cAGQC,EAHR,gBAIQV,EAAKW,oBAAoBD,GAJjC,cAKQE,EAAU,CACdC,IAAKb,EAAKc,kBANd,SASyBC,IAAMC,KAAN,UAAc5B,EAAd,cAA8BwB,GATvD,gBASUK,EATV,EASUA,KACFC,EAAO,IAAIC,sBAAsBF,EAAKJ,KAC5Cb,EAAKoB,qBAAqBF,GAAMG,OAAM,SAAAC,GAAC,OAAIC,QAAQC,IAAIF,MAXzD,6CAvBc,sBAoCd,OACE,gCACE,sCACA,uBAAOG,UAAU,EAAMC,GAAG,UAC1B,uBACA,wBAAQA,GAAG,YAAYC,QAAS,kBAzCrB,WAAD,+BAyC4BC,IAAtC,8BC3CE1C,EAAeC,EAAPC,EAAOD,EA6DR0C,MA3Df,WAAiB,4CACf,sBAAAvC,EAAA,sDACeW,IACR6B,eAAe,QAAS,CAAEC,UAAW,aAF5C,4CADe,sBAMf,SAAS9B,IACP,IAAMD,EAAO,IAAIM,kBAAkBpB,GAKnC,OAJAc,EAAKgC,QAAUC,EACfjC,EAAKO,oBAAsB,kBATd,2CAUXC,CAA6BR,IAExBA,EAZM,4CAef,WAA4CA,GAA5C,uBAAAV,EAAA,sEACsBU,EAAKS,YAAY,CACnCyB,oBAAqB,EACrBC,oBAAqB,IAHzB,cACQzB,EADR,gBAKQV,EAAKW,oBAAoBD,GALjC,cAMQE,EAAU,CACdC,IAAKb,EAAKc,kBAPd,SAUyBC,IAAMC,KAAN,UAAc5B,EAAd,aAA6BwB,GAVtD,gBAUUK,EAVV,EAUUA,KACFC,EAAO,IAAIC,sBAAsBF,EAAKJ,KAC5Cb,EAAKoB,qBAAqBF,GAAMG,OAAM,SAAAC,GAAC,OAAIC,QAAQC,IAAIF,MAZzD,6CAfe,sBA8Bf,SAASW,EAAiBX,GACxB,IAAIc,EAAcvC,SAASC,eAAe,SAC1CyB,QAAQC,IAAI,aAAcF,EAAEe,QAAQ,IACpCD,EAAYrC,UAAYuB,EAAEe,QAAQ,GAGpC,OACE,gCACE,wCACA,qBAAKX,GAAG,SAAR,SACE,uBACED,UAAU,EACVC,GAAG,QACHY,MAAO,CACLC,OAAQ,IACRC,MAAO,IACPC,aAAc,IANlB,SASE,wBAAQC,IAAI,GAAGC,KAAK,kBAGxB,wBAAQjB,GAAG,YAAYC,QAAS,kBApDpB,WAAD,+BAoD2BC,IAAtC,6BCpCSgB,MAZf,WACE,OACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,QAAQC,UAAWzD,IAC/B,cAAC,IAAD,CAAOwD,KAAK,SAASC,UAAWjB,IAChC,cAAC,IAAD,CAAUkB,KAAK,IAAIC,GAAG,iBCZ9BC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFtD,SAASC,eAAe,W","file":"static/js/main.15872735.chunk.js","sourcesContent":["// const config = {\n//   transportPolicy: 'relay',\n//   iceServers: [\n//     { urls: ['stun:ss-turn2.xirsys.com'] },\n//     {\n//       username:\n//         'xR1Sb3-GrIK067wvB2mDWEw8MTcsOa_-1SXpds8mpz2YkCQB_zLUyGefnqWJ74b-AAAAAGB_3pBNdW5lZWJOZXNsaXQ=',\n//       credential: '65c4f662-a279-11eb-89a9-0242ac140004',\n//       urls: [\n//         'turn:ss-turn2.xirsys.com:80?transport=udp',\n//         'turn:ss-turn2.xirsys.com:3478?transport=udp',\n//         'turn:ss-turn2.xirsys.com:80?transport=tcp',\n//         'turn:ss-turn2.xirsys.com:3478?transport=tcp',\n//         'turns:ss-turn2.xirsys.com:443?transport=tcp',\n//         'turns:ss-turn2.xirsys.com:5349?transport=tcp'\n//       ]\n//     }\n//   ]\n//   // iceTransportPolicy: \"relay\", // uncomment this line if you want the user to just connect with TURN server\n// }\n\nconst config = {\n  iceServers: [\n    {\n      urls: 'stun:stun.stunprotocol.org'\n    }\n  ]\n}\n\nconst ip = 'https://sfuserver.herokuapp.com'\n// const ip = 'https://invented-tundra-eagle.glitch.me'\n\n// const ip = 'http://192.168.1.33:5000'\nexport default {\n  config,\n  ip\n}\n","import React from 'react'\nimport axios from 'axios'\n\nimport env from './env'\nconst { config, ip } = env\n\nfunction Host() {\n  async function init() {\n    //getting the host stream\n    const stream = await navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    })\n\n    //showing it locally\n    document.getElementById('video').srcObject = stream\n\n    const peer = createPeer()\n    stream.getTracks().forEach(track => peer.addTrack(track, stream))\n  }\n\n  function createPeer() {\n    const peer = new RTCPeerConnection(config)\n    peer.onnegotiationneeded = () =>\n      handleNegotiationNeededEvent(peer)\n\n    return peer\n  }\n\n  async function handleNegotiationNeededEvent(peer) {\n    //creating an offer an passing the local description of the stream to\n    //the server\n    const offer = await peer.createOffer()\n    await peer.setLocalDescription(offer)\n    const payload = {\n      sdp: peer.localDescription\n    }\n\n    const { data } = await axios.post(`${ip}/broadcast`, payload)\n    const desc = new RTCSessionDescription(data.sdp)\n    peer.setRemoteDescription(desc).catch(e => console.log(e))\n  }\n  return (\n    <div>\n      <h1>Host</h1>\n      <video autoPlay={true} id='video'></video>\n      <br />\n      <button id='my-button' onClick={() => init()}>\n        Start Stream\n      </button>\n    </div>\n  )\n}\n\nexport default Host\n","import React from 'react'\nimport axios from 'axios'\nimport env from './env'\n\nconst { config, ip } = env\n\nfunction Guest() {\n  async function init() {\n    const peer = createPeer()\n    peer.addTransceiver('video', { direction: 'recvonly' })\n  }\n\n  function createPeer() {\n    const peer = new RTCPeerConnection(config)\n    peer.ontrack = handleTrackEvent\n    peer.onnegotiationneeded = () =>\n      handleNegotiationNeededEvent(peer)\n\n    return peer\n  }\n\n  async function handleNegotiationNeededEvent(peer) {\n    const offer = await peer.createOffer({\n      offerToReceiveAudio: 1,\n      offerToReceiveVideo: 1\n    })\n    await peer.setLocalDescription(offer)\n    const payload = {\n      sdp: peer.localDescription\n    }\n\n    const { data } = await axios.post(`${ip}/consumer`, payload)\n    const desc = new RTCSessionDescription(data.sdp)\n    peer.setRemoteDescription(desc).catch(e => console.log(e))\n  }\n\n  function handleTrackEvent(e) {\n    let remoteVideo = document.getElementById('video')\n    console.log('tack is >>', e.streams[0])\n    remoteVideo.srcObject = e.streams[0]\n  }\n\n  return (\n    <div>\n      <h1>Viewer</h1>\n      <div id='vidCon'>\n        <video\n          autoPlay={true}\n          id='video'\n          style={{\n            height: 300,\n            width: 300,\n            borderRadius: 10\n          }}\n        >\n          <source src='' type='video/mp4' />\n        </video>\n      </div>\n      <button id='my-button' onClick={() => init()}>\n        View Stream\n      </button>\n    </div>\n  )\n}\n\nexport default Guest\n","import React from 'react'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect\n} from 'react-router-dom'\nimport Host from './Host'\nimport Guest from './Guest'\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path='/host' component={Host} />\n        <Route path='/guest' component={Guest} />\n        <Redirect from='*' to='/guest' />\n      </Switch>\n    </Router>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}